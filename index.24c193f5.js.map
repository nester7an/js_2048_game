{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.state = initialState;\n        this.initialState = initialState;\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"canCellsMove\",\n            value: function canCellsMove(grid) {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (grid[row][col] === 0) return true;\n                }\n                for(var row1 = 0; row1 < 4; row1++)for(var col1 = 0; col1 < 4; col1++){\n                    var current = grid[row1][col1];\n                    if (col1 < 3 && current === grid[row1][col1 + 1] || row1 < 3 && current === grid[row1 + 1][col1]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"cellsMergeValues\",\n            value: function cellsMergeValues(target, second) {\n                var newTarget = target + second;\n                var newSecond = 0;\n                this.score += newTarget;\n                return [\n                    newTarget,\n                    newSecond\n                ];\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                if (this.status === \"playing\") {\n                    var firstState = this.getState();\n                    this.state = this.state.map(function(row) {\n                        var rowCopy = (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                        var ifEquals = Game.ifEqualSeeEach(rowCopy)[0];\n                        var indexesOfRights = Game.ifEqualSeeEach(rowCopy)[1];\n                        if (ifEquals) {\n                            var newCells = _this.cellsMergeValues(rowCopy[indexesOfRights[0]], rowCopy[indexesOfRights[1]]);\n                            rowCopy[indexesOfRights[0]] = newCells[0];\n                            rowCopy[indexesOfRights[1]] = newCells[1];\n                            if (indexesOfRights.length === 4) {\n                                var newCells2 = _this.cellsMergeValues(rowCopy[indexesOfRights[2]], rowCopy[indexesOfRights[3]]);\n                                rowCopy[indexesOfRights[2]] = newCells2[0];\n                                rowCopy[indexesOfRights[3]] = newCells2[1];\n                            }\n                        }\n                        var rowAfterMove = Game.cellsMoveValues(rowCopy);\n                        return rowAfterMove;\n                    });\n                    var secondState = this.getState();\n                    if (!Game.are2DArraysEqual(firstState, secondState)) this.addRandomCell();\n                }\n                var gameField = this.getState();\n                var flatField = gameField.flat();\n                if (flatField.includes(2048)) this.status = \"win\";\n                if (!this.canCellsMove(this.getState())) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                if (this.status === \"playing\") {\n                    var firstState = this.getState();\n                    this.state = this.state.map(function(row) {\n                        var reverseRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(row).reverse();\n                        var ifEquals = Game.ifEqualSeeEach(reverseRow)[0];\n                        var indexesOfRights = Game.ifEqualSeeEach(reverseRow)[1];\n                        if (ifEquals) {\n                            var newCells = _this.cellsMergeValues(reverseRow[indexesOfRights[0]], reverseRow[indexesOfRights[1]]);\n                            reverseRow[indexesOfRights[0]] = newCells[0];\n                            reverseRow[indexesOfRights[1]] = newCells[1];\n                            if (indexesOfRights.length === 4) {\n                                var newCells2 = _this.cellsMergeValues(reverseRow[indexesOfRights[2]], reverseRow[indexesOfRights[3]]);\n                                reverseRow[indexesOfRights[2]] = newCells2[0];\n                                reverseRow[indexesOfRights[3]] = newCells2[1];\n                            }\n                        }\n                        var rowAfterMove = Game.cellsMoveValues(reverseRow);\n                        return rowAfterMove.reverse();\n                    });\n                    var secondState = this.getState();\n                    if (!Game.are2DArraysEqual(firstState, secondState)) this.addRandomCell();\n                }\n                var gameField = this.getState();\n                var flatField = gameField.flat();\n                if (flatField.includes(2048)) this.status = \"win\";\n                if (!this.canCellsMove(this.getState())) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                if (this.status === \"playing\") {\n                    var firstState = this.getState();\n                    var currentState = this.state;\n                    var transState = Game.transposeMatrix(currentState);\n                    var transMovedState = transState.map(function(row) {\n                        var ifEquals = Game.ifEqualSeeEach(row)[0];\n                        var indexesOfRights = Game.ifEqualSeeEach(row)[1];\n                        if (ifEquals) {\n                            var newCells = _this.cellsMergeValues(row[indexesOfRights[0]], row[indexesOfRights[1]]);\n                            row[indexesOfRights[0]] = newCells[0];\n                            row[indexesOfRights[1]] = newCells[1];\n                            if (indexesOfRights.length === 4) {\n                                var newCells2 = _this.cellsMergeValues(row[indexesOfRights[2]], row[indexesOfRights[3]]);\n                                row[indexesOfRights[2]] = newCells2[0];\n                                row[indexesOfRights[3]] = newCells2[1];\n                            }\n                        }\n                        var rowAfterMove = Game.cellsMoveValues(row);\n                        return rowAfterMove;\n                    });\n                    this.state = Game.transposeMatrix(transMovedState);\n                    var secondState = this.getState();\n                    if (!Game.are2DArraysEqual(firstState, secondState)) this.addRandomCell();\n                }\n                var gameField = this.getState();\n                var flatField = gameField.flat();\n                if (flatField.includes(2048)) this.status = \"win\";\n                if (!this.canCellsMove(this.getState())) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                var firstState = this.getState();\n                if (this.status === \"playing\") {\n                    var currentState = this.state;\n                    var transState = Game.transposeMatrix(currentState);\n                    var transMovedState = transState.map(function(row) {\n                        var reverseRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(row).reverse();\n                        var ifEquals = Game.ifEqualSeeEach(reverseRow)[0];\n                        var indexesOfRights = Game.ifEqualSeeEach(reverseRow)[1];\n                        if (ifEquals) {\n                            var newCells = _this.cellsMergeValues(reverseRow[indexesOfRights[0]], reverseRow[indexesOfRights[1]]);\n                            reverseRow[indexesOfRights[0]] = newCells[0];\n                            reverseRow[indexesOfRights[1]] = newCells[1];\n                            if (indexesOfRights.length === 4) {\n                                var newCells2 = _this.cellsMergeValues(reverseRow[indexesOfRights[2]], reverseRow[indexesOfRights[3]]);\n                                reverseRow[indexesOfRights[2]] = newCells2[0];\n                                reverseRow[indexesOfRights[3]] = newCells2[1];\n                            }\n                        }\n                        var rowAfterMove = Game.cellsMoveValues(reverseRow);\n                        return rowAfterMove.reverse();\n                    });\n                    this.state = Game.transposeMatrix(transMovedState);\n                    var secondState = this.getState();\n                    if (!Game.are2DArraysEqual(firstState, secondState)) this.addRandomCell();\n                }\n                var gameField = this.getState();\n                var flatField = gameField.flat();\n                if (flatField.includes(2048)) this.status = \"win\";\n                if (!this.canCellsMove(this.getState())) this.status = \"lose\";\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addRandomStartCells();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.state = this.initialState;\n                this.score = 0;\n            }\n        },\n        {\n            key: \"addRandomCell\",\n            value: function addRandomCell() {\n                var currentState = this.getState();\n                var linearState = currentState.flat();\n                var iOfNulls = [];\n                linearState.forEach(function(cell, index) {\n                    if (cell === 0) iOfNulls.push(index);\n                });\n                if (iOfNulls.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * iOfNulls.length);\n                    var randomIOfNull = iOfNulls[randomIndex];\n                    var value = 0;\n                    if (Math.random() <= 0.1) value = 4;\n                    else value = 2;\n                    linearState[randomIOfNull] = value;\n                    this.state = Game.convertTo2DArray(linearState);\n                }\n            }\n        },\n        {\n            key: \"addRandomStartCells\",\n            value: function addRandomStartCells() {\n                var currentState = this.getState();\n                var linearState = currentState.flat();\n                var iOfNulls = [];\n                linearState.forEach(function(cell, index) {\n                    if (cell === 0) iOfNulls.push(index);\n                });\n                if (iOfNulls.length > 0) {\n                    var randomIndex1 = Math.floor(Math.random() * iOfNulls.length);\n                    var randomIOfNull1 = iOfNulls[randomIndex1];\n                    iOfNulls.splice(randomIndex1, 1);\n                    var randomIndex2 = Math.floor(Math.random() * iOfNulls.length);\n                    var randomIOfNull2 = iOfNulls[randomIndex2];\n                    var value1 = 0;\n                    var value2 = 0;\n                    if (Math.random() <= 0.5) value1 = 4;\n                    else value1 = 2;\n                    if (Math.random() <= 0.5) value2 = 4;\n                    else value2 = 2;\n                    linearState[randomIOfNull1] = value1;\n                    linearState[randomIOfNull2] = value2;\n                    this.state = Game.convertTo2DArray(linearState);\n                }\n            }\n        }\n    ], [\n        {\n            key: \"transposeMatrix\",\n            value: function transposeMatrix(matrix) {\n                return matrix[0].map(function(_, colIndex) {\n                    return matrix.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n            }\n        },\n        {\n            key: \"ifEqualSeeEach\",\n            value: function ifEqualSeeEach(elements) {\n                var ifEqual = false;\n                var indexesOfRight = [];\n                var allEqual = elements.every(function(item) {\n                    return item === elements[0] && elements[0] !== 0;\n                });\n                for(var i = 0; i < elements.length - 1; i += 1){\n                    var j = i + 1;\n                    if (elements[j] === 0) {\n                        j++;\n                        if (elements[j] === 0) j++;\n                    }\n                    if (elements[i] === elements[j] && elements[i] !== 0) {\n                        ifEqual = true;\n                        indexesOfRight.push(i);\n                        indexesOfRight.push(j);\n                        if (!allEqual && !(elements[0] === elements[1] && elements[2] === elements[3])) break;\n                        i++;\n                    }\n                }\n                return [\n                    ifEqual,\n                    indexesOfRight\n                ];\n            }\n        },\n        {\n            key: \"convertTo2DArray\",\n            value: function convertTo2DArray(arr) {\n                var result = [];\n                for(var i = 0; i < 4; i++)result.push(arr.slice(i * 4, i * 4 + 4));\n                return result;\n            }\n        },\n        {\n            key: \"cellsMoveValues\",\n            value: function cellsMoveValues(rowOrColValues) {\n                var insertPosition = 0;\n                var valuesCopy = (0, $227c6742e0ff6f82$export$71511d61b312f219)(rowOrColValues);\n                valuesCopy.forEach(function(cell, index, row) {\n                    if (cell !== 0) {\n                        if (insertPosition !== index) {\n                            valuesCopy[insertPosition] = cell;\n                            row[index] = 0;\n                        }\n                        insertPosition++;\n                    }\n                });\n                return valuesCopy;\n            }\n        },\n        {\n            key: \"are2DArraysEqual\",\n            value: function are2DArraysEqual(arr1, arr2) {\n                if (arr1.length !== arr2.length) return false;\n                return arr1.every(function(subArr1, index) {\n                    var subArr2 = arr2[index];\n                    if (subArr1.length !== subArr2.length) return false;\n                    return subArr1.every(function(value, subIndex) {\n                        return value === subArr2[subIndex];\n                    });\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports([\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\nvar $197cd56b15c33885$var$gameBody = document.querySelector(\".game-field tbody\");\nvar $197cd56b15c33885$var$gameHeader = document.querySelector(\".game-header\");\nvar $197cd56b15c33885$var$button = $197cd56b15c33885$var$gameHeader.querySelector(\".button\");\nvar $197cd56b15c33885$var$gameScore = document.querySelector(\".game-score\");\nfunction $197cd56b15c33885$var$updateBoard() {\n    $197cd56b15c33885$var$gameBody.innerHTML = \"\";\n    $197cd56b15c33885$var$game.getState().forEach(function(row) {\n        var rowElement = document.createElement(\"tr\");\n        rowElement.classList.add(\"field-row\");\n        row.forEach(function(cell) {\n            var cellElement = document.createElement(\"td\");\n            cellElement.classList.add(\"field-cell\");\n            if (cell > 0) cellElement.classList.add(\"field-cell--\".concat(cell));\n            cellElement.textContent = cell === 0 ? \"\" : cell;\n            rowElement.appendChild(cellElement);\n        });\n        $197cd56b15c33885$var$gameBody.appendChild(rowElement);\n    });\n    $197cd56b15c33885$var$gameScore.textContent = \"\".concat($197cd56b15c33885$var$game.getScore());\n}\nfunction $197cd56b15c33885$var$ifMaxScore() {\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") {\n        $197cd56b15c33885$var$removeEventListeners();\n        document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    }\n}\nfunction $197cd56b15c33885$var$ifStateBlocked() {\n    document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\nfunction $197cd56b15c33885$var$are2DArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    return arr1.every(function(subArr1, index) {\n        var subArr2 = arr2[index];\n        if (subArr1.length !== subArr2.length) return false;\n        return subArr1.every(function(value, subIndex) {\n            return value === subArr2[subIndex];\n        });\n    });\n}\nfunction $197cd56b15c33885$var$clickOnButton() {\n    if ($197cd56b15c33885$var$button.classList.contains(\"start\")) {\n        var messageStart = document.querySelector(\".message-start\");\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n        $197cd56b15c33885$var$button.textContent = \"restart\";\n        messageStart.classList.add(\"hidden\");\n        var gameField = document.querySelector(\".game-field\");\n        var cells = gameField.querySelectorAll(\".field-cell\");\n        var regularArray = $197cd56b15c33885$var$game.initialState.flat();\n        document.querySelector(\".game-score\").textContent = 0;\n        cells.forEach(function(cell, index) {\n            if (regularArray[index] > 0) {\n                cell.textContent = regularArray[index];\n                cell.classList.add(\"field-cell--\".concat(regularArray[index]));\n            }\n        });\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$addEventListeners();\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        document.querySelector(\".message-lose\").classList.add(\"hidden\");\n        document.querySelector(\".message-win\").classList.add(\"hidden\");\n        $197cd56b15c33885$var$button.classList.remove(\"restart\");\n        $197cd56b15c33885$var$button.classList.add(\"start\");\n        $197cd56b15c33885$var$button.textContent = \"start\";\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$addEventListeners();\n    }\n}\n$197cd56b15c33885$var$button.addEventListener(\"click\", $197cd56b15c33885$var$clickOnButton);\nfunction $197cd56b15c33885$var$moveLeft() {\n    if (event.key === \"ArrowLeft\") {\n        $197cd56b15c33885$var$game.moveLeft();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$ifMaxScore();\n        if ($197cd56b15c33885$var$game.getStatus === \"lose\") $197cd56b15c33885$var$ifStateBlocked();\n        $197cd56b15c33885$var$updateBoard();\n    }\n}\nfunction $197cd56b15c33885$var$moveRight() {\n    if (event.key === \"ArrowRight\") {\n        var firstState = $197cd56b15c33885$var$game.getState();\n        $197cd56b15c33885$var$game.moveRight();\n        var secondState = $197cd56b15c33885$var$game.getState();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$ifMaxScore();\n        if (!$197cd56b15c33885$var$game.canCellsMove($197cd56b15c33885$var$game.getState())) $197cd56b15c33885$var$ifStateBlocked();\n        if (!$197cd56b15c33885$var$are2DArraysEqual(firstState, secondState)) {\n            $197cd56b15c33885$var$game.addRandomCell();\n            $197cd56b15c33885$var$updateBoard();\n        }\n    }\n}\nfunction $197cd56b15c33885$var$moveUp() {\n    if (event.key === \"ArrowUp\") {\n        var firstState = $197cd56b15c33885$var$game.getState();\n        $197cd56b15c33885$var$game.moveUp();\n        var secondState = $197cd56b15c33885$var$game.getState();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$ifMaxScore();\n        if (!$197cd56b15c33885$var$game.canCellsMove($197cd56b15c33885$var$game.getState())) $197cd56b15c33885$var$ifStateBlocked();\n        if (!$197cd56b15c33885$var$are2DArraysEqual(firstState, secondState)) {\n            $197cd56b15c33885$var$game.addRandomCell();\n            $197cd56b15c33885$var$updateBoard();\n        }\n    }\n}\nfunction $197cd56b15c33885$var$moveDown() {\n    if (event.key === \"ArrowDown\") {\n        var firstState = $197cd56b15c33885$var$game.getState();\n        $197cd56b15c33885$var$game.moveDown();\n        var secondState = $197cd56b15c33885$var$game.getState();\n        $197cd56b15c33885$var$updateBoard();\n        $197cd56b15c33885$var$ifMaxScore();\n        if (!$197cd56b15c33885$var$game.canCellsMove($197cd56b15c33885$var$game.getState())) $197cd56b15c33885$var$ifStateBlocked();\n        if (!$197cd56b15c33885$var$are2DArraysEqual(firstState, secondState)) {\n            $197cd56b15c33885$var$game.addRandomCell();\n            $197cd56b15c33885$var$updateBoard();\n        }\n    }\n}\nfunction $197cd56b15c33885$var$removeEventListeners() {\n    document.removeEventListener(\"keydown\", $197cd56b15c33885$var$moveLeft);\n    document.removeEventListener(\"keydown\", $197cd56b15c33885$var$moveRight);\n    document.removeEventListener(\"keydown\", $197cd56b15c33885$var$moveUp);\n    document.removeEventListener(\"keydown\", $197cd56b15c33885$var$moveDown);\n}\nfunction $197cd56b15c33885$var$addEventListeners() {\n    document.addEventListener(\"keydown\", $197cd56b15c33885$var$moveLeft);\n    document.addEventListener(\"keydown\", $197cd56b15c33885$var$moveRight);\n    document.addEventListener(\"keydown\", $197cd56b15c33885$var$moveUp);\n    document.addEventListener(\"keydown\", $197cd56b15c33885$var$moveDown);\n}\n\n})();\n//# sourceMappingURL=index.24c193f5.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game([\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n]);\n\nconst gameBody = document.querySelector('.game-field tbody');\nconst gameHeader = document.querySelector('.game-header');\nconst button = gameHeader.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\n\nfunction updateBoard() {\n  gameBody.innerHTML = '';\n\n  game.getState().forEach((row) => {\n    const rowElement = document.createElement('tr');\n\n    rowElement.classList.add('field-row');\n\n    row.forEach((cell) => {\n      const cellElement = document.createElement('td');\n\n      cellElement.classList.add('field-cell');\n\n      if (cell > 0) {\n        cellElement.classList.add(`field-cell--${cell}`);\n      }\n\n      cellElement.textContent = cell === 0 ? '' : cell;\n      rowElement.appendChild(cellElement);\n    });\n    gameBody.appendChild(rowElement);\n  });\n  gameScore.textContent = `${game.getScore()}`;\n}\n\nfunction ifMaxScore() {\n  if (game.getStatus() === 'win') {\n    removeEventListeners();\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n}\n\nfunction ifStateBlocked() {\n  document.querySelector('.message-lose').classList.remove('hidden');\n}\n\nfunction are2DArraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  return arr1.every((subArr1, index) => {\n    const subArr2 = arr2[index];\n\n    if (subArr1.length !== subArr2.length) {\n      return false;\n    }\n\n    return subArr1.every((value, subIndex) => value === subArr2[subIndex]);\n  });\n}\n\nfunction clickOnButton() {\n  if (button.classList.contains('start')) {\n    const messageStart = document.querySelector('.message-start');\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'restart';\n    messageStart.classList.add('hidden');\n\n    const gameField = document.querySelector('.game-field');\n    const cells = gameField.querySelectorAll('.field-cell');\n    const regularArray = game.initialState.flat();\n\n    document.querySelector('.game-score').textContent = 0;\n\n    cells.forEach((cell, index) => {\n      if (regularArray[index] > 0) {\n        cell.textContent = regularArray[index];\n\n        cell.classList.add(`field-cell--${regularArray[index]}`);\n      }\n    });\n\n    game.start();\n    updateBoard();\n    addEventListeners();\n  } else {\n    game.restart();\n\n    document.querySelector('.message-lose').classList.add('hidden');\n    document.querySelector('.message-win').classList.add('hidden');\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'start';\n\n    updateBoard();\n\n    addEventListeners();\n  }\n}\n\nbutton.addEventListener('click', clickOnButton);\n\nfunction moveLeft() {\n  if (event.key === 'ArrowLeft') {\n    game.moveLeft();\n\n    updateBoard();\n\n    ifMaxScore();\n\n    if (game.getStatus === 'lose') {\n      ifStateBlocked();\n    }\n\n    updateBoard();\n  }\n}\n\nfunction moveRight() {\n  if (event.key === 'ArrowRight') {\n    const firstState = game.getState();\n\n    game.moveRight();\n\n    const secondState = game.getState();\n\n    updateBoard();\n\n    ifMaxScore();\n\n    if (!game.canCellsMove(game.getState())) {\n      ifStateBlocked();\n    }\n\n    if (!are2DArraysEqual(firstState, secondState)) {\n      game.addRandomCell();\n      updateBoard();\n    }\n  }\n}\n\nfunction moveUp() {\n  if (event.key === 'ArrowUp') {\n    const firstState = game.getState();\n\n    game.moveUp();\n\n    const secondState = game.getState();\n\n    updateBoard();\n\n    ifMaxScore();\n\n    if (!game.canCellsMove(game.getState())) {\n      ifStateBlocked();\n    }\n\n    if (!are2DArraysEqual(firstState, secondState)) {\n      game.addRandomCell();\n      updateBoard();\n    }\n  }\n}\n\nfunction moveDown() {\n  if (event.key === 'ArrowDown') {\n    const firstState = game.getState();\n\n    game.moveDown();\n\n    const secondState = game.getState();\n\n    updateBoard();\n\n    ifMaxScore();\n\n    if (!game.canCellsMove(game.getState())) {\n      ifStateBlocked();\n    }\n\n    if (!are2DArraysEqual(firstState, secondState)) {\n      game.addRandomCell();\n      updateBoard();\n    }\n  }\n}\n\nfunction removeEventListeners() {\n  document.removeEventListener('keydown', moveLeft);\n  document.removeEventListener('keydown', moveRight);\n  document.removeEventListener('keydown', moveUp);\n  document.removeEventListener('keydown', moveDown);\n}\n\nfunction addEventListeners() {\n  document.addEventListener('keydown', moveLeft);\n  document.addEventListener('keydown', moveRight);\n  document.addEventListener('keydown', moveUp);\n  document.addEventListener('keydown', moveDown);\n}\n","'use strict';\n\nclass Game {\n  /**\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   */\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = initialState;\n    this.initialState = initialState;\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  static transposeMatrix(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n\n  static ifEqualSeeEach(elements) {\n    let ifEqual = false;\n    const indexesOfRight = [];\n    const allEqual = elements.every((item) => {\n      return item === elements[0] && elements[0] !== 0;\n    });\n\n    for (let i = 0; i < elements.length - 1; i += 1) {\n      let j = i + 1;\n\n      if (elements[j] === 0) {\n        j++;\n\n        if (elements[j] === 0) {\n          j++;\n        }\n      }\n\n      if (elements[i] === elements[j] && elements[i] !== 0) {\n        ifEqual = true;\n\n        indexesOfRight.push(i);\n        indexesOfRight.push(j);\n\n        if (\n          !allEqual &&\n          !(elements[0] === elements[1] && elements[2] === elements[3])\n        ) {\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    return [ifEqual, indexesOfRight];\n  }\n\n  static convertTo2DArray(arr) {\n    const result = [];\n\n    for (let i = 0; i < 4; i++) {\n      result.push(arr.slice(i * 4, i * 4 + 4));\n    }\n\n    return result;\n  }\n\n  static cellsMoveValues(rowOrColValues) {\n    let insertPosition = 0;\n    const valuesCopy = [...rowOrColValues];\n\n    valuesCopy.forEach((cell, index, row) => {\n      if (cell !== 0) {\n        if (insertPosition !== index) {\n          valuesCopy[insertPosition] = cell;\n          row[index] = 0;\n        }\n        insertPosition++;\n      }\n    });\n\n    return valuesCopy;\n  }\n\n  static are2DArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    return arr1.every((subArr1, index) => {\n      const subArr2 = arr2[index];\n\n      if (subArr1.length !== subArr2.length) {\n        return false;\n      }\n\n      return subArr1.every((value, subIndex) => value === subArr2[subIndex]);\n    });\n  }\n\n  canCellsMove(grid) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (grid[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = grid[row][col];\n\n        if (\n          (col < 3 && current === grid[row][col + 1]) ||\n          (row < 3 && current === grid[row + 1][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  cellsMergeValues(target, second) {\n    const newTarget = target + second;\n    const newSecond = 0;\n\n    this.score += newTarget;\n\n    return [newTarget, newSecond];\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const firstState = this.getState();\n\n      this.state = this.state.map((row) => {\n        const rowCopy = [...row];\n        const ifEquals = Game.ifEqualSeeEach(rowCopy)[0];\n        const indexesOfRights = Game.ifEqualSeeEach(rowCopy)[1];\n\n        if (ifEquals) {\n          const newCells = this.cellsMergeValues(\n            rowCopy[indexesOfRights[0]],\n            rowCopy[indexesOfRights[1]],\n          );\n\n          rowCopy[indexesOfRights[0]] = newCells[0];\n          rowCopy[indexesOfRights[1]] = newCells[1];\n\n          if (indexesOfRights.length === 4) {\n            const newCells2 = this.cellsMergeValues(\n              rowCopy[indexesOfRights[2]],\n              rowCopy[indexesOfRights[3]],\n            );\n\n            rowCopy[indexesOfRights[2]] = newCells2[0];\n            rowCopy[indexesOfRights[3]] = newCells2[1];\n          }\n        }\n\n        const rowAfterMove = Game.cellsMoveValues(rowCopy);\n\n        return rowAfterMove;\n      });\n\n      const secondState = this.getState();\n\n      if (!Game.are2DArraysEqual(firstState, secondState)) {\n        this.addRandomCell();\n      }\n    }\n\n    const gameField = this.getState();\n    const flatField = gameField.flat();\n\n    if (flatField.includes(2048)) {\n      this.status = 'win';\n    }\n\n    if (!this.canCellsMove(this.getState())) {\n      this.status = 'lose';\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const firstState = this.getState();\n\n      this.state = this.state.map((row) => {\n        const reverseRow = [...row].reverse();\n        const ifEquals = Game.ifEqualSeeEach(reverseRow)[0];\n        const indexesOfRights = Game.ifEqualSeeEach(reverseRow)[1];\n\n        if (ifEquals) {\n          const newCells = this.cellsMergeValues(\n            reverseRow[indexesOfRights[0]],\n            reverseRow[indexesOfRights[1]],\n          );\n\n          reverseRow[indexesOfRights[0]] = newCells[0];\n          reverseRow[indexesOfRights[1]] = newCells[1];\n\n          if (indexesOfRights.length === 4) {\n            const newCells2 = this.cellsMergeValues(\n              reverseRow[indexesOfRights[2]],\n              reverseRow[indexesOfRights[3]],\n            );\n\n            reverseRow[indexesOfRights[2]] = newCells2[0];\n            reverseRow[indexesOfRights[3]] = newCells2[1];\n          }\n        }\n\n        const rowAfterMove = Game.cellsMoveValues(reverseRow);\n\n        return rowAfterMove.reverse();\n      });\n\n      const secondState = this.getState();\n\n      if (!Game.are2DArraysEqual(firstState, secondState)) {\n        this.addRandomCell();\n      }\n    }\n\n    const gameField = this.getState();\n    const flatField = gameField.flat();\n\n    if (flatField.includes(2048)) {\n      this.status = 'win';\n    }\n\n    if (!this.canCellsMove(this.getState())) {\n      this.status = 'lose';\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const firstState = this.getState();\n\n      const currentState = this.state;\n      const transState = Game.transposeMatrix(currentState);\n\n      const transMovedState = transState.map((row) => {\n        const ifEquals = Game.ifEqualSeeEach(row)[0];\n        const indexesOfRights = Game.ifEqualSeeEach(row)[1];\n\n        if (ifEquals) {\n          const newCells = this.cellsMergeValues(\n            row[indexesOfRights[0]],\n            row[indexesOfRights[1]],\n          );\n\n          row[indexesOfRights[0]] = newCells[0];\n          row[indexesOfRights[1]] = newCells[1];\n\n          if (indexesOfRights.length === 4) {\n            const newCells2 = this.cellsMergeValues(\n              row[indexesOfRights[2]],\n              row[indexesOfRights[3]],\n            );\n\n            row[indexesOfRights[2]] = newCells2[0];\n            row[indexesOfRights[3]] = newCells2[1];\n          }\n        }\n\n        const rowAfterMove = Game.cellsMoveValues(row);\n\n        return rowAfterMove;\n      });\n\n      this.state = Game.transposeMatrix(transMovedState);\n\n      const secondState = this.getState();\n\n      if (!Game.are2DArraysEqual(firstState, secondState)) {\n        this.addRandomCell();\n      }\n    }\n\n    const gameField = this.getState();\n    const flatField = gameField.flat();\n\n    if (flatField.includes(2048)) {\n      this.status = 'win';\n    }\n\n    if (!this.canCellsMove(this.getState())) {\n      this.status = 'lose';\n    }\n  }\n\n  moveDown() {\n    const firstState = this.getState();\n\n    if (this.status === 'playing') {\n      const currentState = this.state;\n      const transState = Game.transposeMatrix(currentState);\n\n      const transMovedState = transState.map((row) => {\n        const reverseRow = [...row].reverse();\n        const ifEquals = Game.ifEqualSeeEach(reverseRow)[0];\n        const indexesOfRights = Game.ifEqualSeeEach(reverseRow)[1];\n\n        if (ifEquals) {\n          const newCells = this.cellsMergeValues(\n            reverseRow[indexesOfRights[0]],\n            reverseRow[indexesOfRights[1]],\n          );\n\n          reverseRow[indexesOfRights[0]] = newCells[0];\n          reverseRow[indexesOfRights[1]] = newCells[1];\n\n          if (indexesOfRights.length === 4) {\n            const newCells2 = this.cellsMergeValues(\n              reverseRow[indexesOfRights[2]],\n              reverseRow[indexesOfRights[3]],\n            );\n\n            reverseRow[indexesOfRights[2]] = newCells2[0];\n            reverseRow[indexesOfRights[3]] = newCells2[1];\n          }\n        }\n\n        const rowAfterMove = Game.cellsMoveValues(reverseRow);\n\n        return rowAfterMove.reverse();\n      });\n\n      this.state = Game.transposeMatrix(transMovedState);\n\n      const secondState = this.getState();\n\n      if (!Game.are2DArraysEqual(firstState, secondState)) {\n        this.addRandomCell();\n      }\n    }\n\n    const gameField = this.getState();\n    const flatField = gameField.flat();\n\n    if (flatField.includes(2048)) {\n      this.status = 'win';\n    }\n\n    if (!this.canCellsMove(this.getState())) {\n      this.status = 'lose';\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomStartCells();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.state = this.initialState;\n    this.score = 0;\n  }\n\n  addRandomCell() {\n    const currentState = this.getState();\n    const linearState = currentState.flat();\n\n    const iOfNulls = [];\n\n    linearState.forEach((cell, index) => {\n      if (cell === 0) {\n        iOfNulls.push(index);\n      }\n    });\n\n    if (iOfNulls.length > 0) {\n      const randomIndex = Math.floor(Math.random() * iOfNulls.length);\n      const randomIOfNull = iOfNulls[randomIndex];\n\n      let value = 0;\n\n      if (Math.random() <= 0.1) {\n        value = 4;\n      } else {\n        value = 2;\n      }\n\n      linearState[randomIOfNull] = value;\n\n      this.state = Game.convertTo2DArray(linearState);\n    }\n  }\n\n  addRandomStartCells() {\n    const currentState = this.getState();\n    const linearState = currentState.flat();\n\n    const iOfNulls = [];\n\n    linearState.forEach((cell, index) => {\n      if (cell === 0) {\n        iOfNulls.push(index);\n      }\n    });\n\n    if (iOfNulls.length > 0) {\n      const randomIndex1 = Math.floor(Math.random() * iOfNulls.length);\n      const randomIOfNull1 = iOfNulls[randomIndex1];\n\n      iOfNulls.splice(randomIndex1, 1);\n\n      const randomIndex2 = Math.floor(Math.random() * iOfNulls.length);\n      const randomIOfNull2 = iOfNulls[randomIndex2];\n\n      let value1 = 0;\n      let value2 = 0;\n\n      if (Math.random() <= 0.5) {\n        value1 = 4;\n      } else {\n        value1 = 2;\n      }\n\n      if (Math.random() <= 0.5) {\n        value2 = 4;\n      } else {\n        value2 = 2;\n      }\n\n      linearState[randomIOfNull1] = value1;\n      linearState[randomIOfNull2] = value2;\n\n      this.state = Game.convertTo2DArray(linearState);\n    }\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$c3b10a83b523f372$export$71511d61b312f219","arr","len","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","staticProps","Game","initialState","arguments","instance","Constructor","state","status","score","value","grid","row","col","row1","col1","current","second","newTarget","_this","firstState","getState","map","rowCopy","ifEquals","ifEqualSeeEach","indexesOfRights","newCells","cellsMergeValues","newCells2","cellsMoveValues","secondState","are2DArraysEqual","addRandomCell","flatField","gameField","flat","includes","canCellsMove","reverseRow","reverse","rowAfterMove","currentState","transMovedState","transState","transposeMatrix","addRandomStartCells","linearState","iOfNulls","forEach","cell","index","push","randomIndex","Math","floor","random","randomIOfNull","convertTo2DArray","randomIndex1","randomIOfNull1","splice","randomIndex2","randomIOfNull2","value1","value2","matrix","_","colIndex","elements","ifEqual","indexesOfRight","allEqual","every","item","j","result","rowOrColValues","insertPosition","valuesCopy","arr1","subArr1","subArr2","subIndex","$197cd56b15c33885$var$gameBody","document","querySelector","$197cd56b15c33885$var$button","$197cd56b15c33885$var$gameHeader","$197cd56b15c33885$var$gameScore","$197cd56b15c33885$var$updateBoard","innerHTML","rowElement","createElement","classList","add","cellElement","concat","textContent","appendChild","getScore","$197cd56b15c33885$var$ifMaxScore","getStatus","removeEventListener","$197cd56b15c33885$var$moveLeft","$197cd56b15c33885$var$moveRight","$197cd56b15c33885$var$moveUp","$197cd56b15c33885$var$moveDown","remove","$197cd56b15c33885$var$ifStateBlocked","$197cd56b15c33885$var$are2DArraysEqual","event","moveLeft","moveRight","moveUp","moveDown","$197cd56b15c33885$var$addEventListeners","addEventListener","contains","messageStart","cells","querySelectorAll","regularArray","start","restart"],"version":3,"file":"index.24c193f5.js.map"}