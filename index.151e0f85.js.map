{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.state = initialState;\n        this.initialState = initialState;\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    static transposeMatrix(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    static ifEqualSeeEach(elements) {\n        let ifEqual = false;\n        const indexesOfRight = [];\n        const allEqual = elements.every((item)=>{\n            return item === elements[0] && elements[0] !== 0;\n        });\n        for(let i = 0; i < elements.length - 1; i += 1){\n            let j = i + 1;\n            if (elements[j] === 0) {\n                j++;\n                if (elements[j] === 0) j++;\n            }\n            if (elements[i] === elements[j] && elements[i] !== 0) {\n                ifEqual = true;\n                indexesOfRight.push(i);\n                indexesOfRight.push(j);\n                if (!allEqual && !(elements[0] === elements[1] && elements[2] === elements[3])) break;\n                i++;\n            }\n        }\n        return [\n            ifEqual,\n            indexesOfRight\n        ];\n    }\n    static convertTo2DArray(arr) {\n        const result = [];\n        for(let i = 0; i < 4; i++)result.push(arr.slice(i * 4, i * 4 + 4));\n        return result;\n    }\n    static cellsMoveValues(rowOrColValues) {\n        let insertPosition = 0;\n        const valuesCopy = [\n            ...rowOrColValues\n        ];\n        valuesCopy.forEach((cell, index, row)=>{\n            if (cell !== 0) {\n                if (insertPosition !== index) {\n                    valuesCopy[insertPosition] = cell;\n                    row[index] = 0;\n                }\n                insertPosition++;\n            }\n        });\n        return valuesCopy;\n    }\n    static are2DArraysEqual(arr1, arr2) {\n        if (arr1.length !== arr2.length) return false;\n        return arr1.every((subArr1, index)=>{\n            const subArr2 = arr2[index];\n            if (subArr1.length !== subArr2.length) return false;\n            return subArr1.every((value, subIndex)=>value === subArr2[subIndex]);\n        });\n    }\n    canCellsMove(grid) {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (grid[row][col] === 0) return true;\n        }\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = grid[row][col];\n            if (col < 3 && current === grid[row][col + 1] || row < 3 && current === grid[row + 1][col]) return true;\n        }\n        return false;\n    }\n    cellsMergeValues(target, second) {\n        const newTarget = target + second;\n        const newSecond = 0;\n        this.score += newTarget;\n        return [\n            newTarget,\n            newSecond\n        ];\n    }\n    moveLeft() {\n        if (this.status === \"playing\") {\n            const firstState = this.getState();\n            this.state = this.state.map((row)=>{\n                const rowCopy = [\n                    ...row\n                ];\n                const ifEquals = $a5fd07fa01589658$var$Game.ifEqualSeeEach(rowCopy)[0];\n                const indexesOfRights = $a5fd07fa01589658$var$Game.ifEqualSeeEach(rowCopy)[1];\n                if (ifEquals) {\n                    const newCells = this.cellsMergeValues(rowCopy[indexesOfRights[0]], rowCopy[indexesOfRights[1]]);\n                    rowCopy[indexesOfRights[0]] = newCells[0];\n                    rowCopy[indexesOfRights[1]] = newCells[1];\n                    if (indexesOfRights.length === 4) {\n                        const newCells2 = this.cellsMergeValues(rowCopy[indexesOfRights[2]], rowCopy[indexesOfRights[3]]);\n                        rowCopy[indexesOfRights[2]] = newCells2[0];\n                        rowCopy[indexesOfRights[3]] = newCells2[1];\n                    }\n                }\n                const rowAfterMove = $a5fd07fa01589658$var$Game.cellsMoveValues(rowCopy);\n                return rowAfterMove;\n            });\n            const secondState = this.getState();\n            if (!$a5fd07fa01589658$var$Game.are2DArraysEqual(firstState, secondState)) this.addRandomCell();\n        }\n        const gameField = this.getState();\n        const flatField = gameField.flat();\n        if (flatField.includes(2048)) this.status = \"win\";\n        if (!this.canCellsMove(this.getState())) this.status = \"lose\";\n    }\n    moveRight() {\n        if (this.status === \"playing\") {\n            const firstState = this.getState();\n            this.state = this.state.map((row)=>{\n                const reverseRow = [\n                    ...row\n                ].reverse();\n                const ifEquals = $a5fd07fa01589658$var$Game.ifEqualSeeEach(reverseRow)[0];\n                const indexesOfRights = $a5fd07fa01589658$var$Game.ifEqualSeeEach(reverseRow)[1];\n                if (ifEquals) {\n                    const newCells = this.cellsMergeValues(reverseRow[indexesOfRights[0]], reverseRow[indexesOfRights[1]]);\n                    reverseRow[indexesOfRights[0]] = newCells[0];\n                    reverseRow[indexesOfRights[1]] = newCells[1];\n                    if (indexesOfRights.length === 4) {\n                        const newCells2 = this.cellsMergeValues(reverseRow[indexesOfRights[2]], reverseRow[indexesOfRights[3]]);\n                        reverseRow[indexesOfRights[2]] = newCells2[0];\n                        reverseRow[indexesOfRights[3]] = newCells2[1];\n                    }\n                }\n                const rowAfterMove = $a5fd07fa01589658$var$Game.cellsMoveValues(reverseRow);\n                return rowAfterMove.reverse();\n            });\n            const secondState = this.getState();\n            if (!$a5fd07fa01589658$var$Game.are2DArraysEqual(firstState, secondState)) this.addRandomCell();\n        }\n        const gameField = this.getState();\n        const flatField = gameField.flat();\n        if (flatField.includes(2048)) this.status = \"win\";\n        if (!this.canCellsMove(this.getState())) this.status = \"lose\";\n    }\n    moveUp() {\n        if (this.status === \"playing\") {\n            const firstState = this.getState();\n            const currentState = this.state;\n            const transState = $a5fd07fa01589658$var$Game.transposeMatrix(currentState);\n            const transMovedState = transState.map((row)=>{\n                const ifEquals = $a5fd07fa01589658$var$Game.ifEqualSeeEach(row)[0];\n                const indexesOfRights = $a5fd07fa01589658$var$Game.ifEqualSeeEach(row)[1];\n                if (ifEquals) {\n                    const newCells = this.cellsMergeValues(row[indexesOfRights[0]], row[indexesOfRights[1]]);\n                    row[indexesOfRights[0]] = newCells[0];\n                    row[indexesOfRights[1]] = newCells[1];\n                    if (indexesOfRights.length === 4) {\n                        const newCells2 = this.cellsMergeValues(row[indexesOfRights[2]], row[indexesOfRights[3]]);\n                        row[indexesOfRights[2]] = newCells2[0];\n                        row[indexesOfRights[3]] = newCells2[1];\n                    }\n                }\n                const rowAfterMove = $a5fd07fa01589658$var$Game.cellsMoveValues(row);\n                return rowAfterMove;\n            });\n            this.state = $a5fd07fa01589658$var$Game.transposeMatrix(transMovedState);\n            const secondState = this.getState();\n            if (!$a5fd07fa01589658$var$Game.are2DArraysEqual(firstState, secondState)) this.addRandomCell();\n        }\n        const gameField = this.getState();\n        const flatField = gameField.flat();\n        if (flatField.includes(2048)) this.status = \"win\";\n        if (!this.canCellsMove(this.getState())) this.status = \"lose\";\n    }\n    moveDown() {\n        const firstState = this.getState();\n        if (this.status === \"playing\") {\n            const currentState = this.state;\n            const transState = $a5fd07fa01589658$var$Game.transposeMatrix(currentState);\n            const transMovedState = transState.map((row)=>{\n                const reverseRow = [\n                    ...row\n                ].reverse();\n                const ifEquals = $a5fd07fa01589658$var$Game.ifEqualSeeEach(reverseRow)[0];\n                const indexesOfRights = $a5fd07fa01589658$var$Game.ifEqualSeeEach(reverseRow)[1];\n                if (ifEquals) {\n                    const newCells = this.cellsMergeValues(reverseRow[indexesOfRights[0]], reverseRow[indexesOfRights[1]]);\n                    reverseRow[indexesOfRights[0]] = newCells[0];\n                    reverseRow[indexesOfRights[1]] = newCells[1];\n                    if (indexesOfRights.length === 4) {\n                        const newCells2 = this.cellsMergeValues(reverseRow[indexesOfRights[2]], reverseRow[indexesOfRights[3]]);\n                        reverseRow[indexesOfRights[2]] = newCells2[0];\n                        reverseRow[indexesOfRights[3]] = newCells2[1];\n                    }\n                }\n                const rowAfterMove = $a5fd07fa01589658$var$Game.cellsMoveValues(reverseRow);\n                return rowAfterMove.reverse();\n            });\n            this.state = $a5fd07fa01589658$var$Game.transposeMatrix(transMovedState);\n            const secondState = this.getState();\n            if (!$a5fd07fa01589658$var$Game.are2DArraysEqual(firstState, secondState)) this.addRandomCell();\n        }\n        const gameField = this.getState();\n        const flatField = gameField.flat();\n        if (flatField.includes(2048)) this.status = \"win\";\n        if (!this.canCellsMove(this.getState())) this.status = \"lose\";\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.addRandomStartCells();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"idle\";\n        this.state = this.initialState;\n        this.score = 0;\n    }\n    addRandomCell() {\n        const currentState = this.getState();\n        const linearState = currentState.flat();\n        const iOfNulls = [];\n        linearState.forEach((cell, index)=>{\n            if (cell === 0) iOfNulls.push(index);\n        });\n        if (iOfNulls.length > 0) {\n            const randomIndex = Math.floor(Math.random() * iOfNulls.length);\n            const randomIOfNull = iOfNulls[randomIndex];\n            let value = 0;\n            if (Math.random() <= 0.1) value = 4;\n            else value = 2;\n            linearState[randomIOfNull] = value;\n            this.state = $a5fd07fa01589658$var$Game.convertTo2DArray(linearState);\n        }\n    }\n    addRandomStartCells() {\n        const currentState = this.getState();\n        const linearState = currentState.flat();\n        const iOfNulls = [];\n        linearState.forEach((cell, index)=>{\n            if (cell === 0) iOfNulls.push(index);\n        });\n        if (iOfNulls.length > 0) {\n            const randomIndex1 = Math.floor(Math.random() * iOfNulls.length);\n            const randomIOfNull1 = iOfNulls[randomIndex1];\n            iOfNulls.splice(randomIndex1, 1);\n            const randomIndex2 = Math.floor(Math.random() * iOfNulls.length);\n            const randomIOfNull2 = iOfNulls[randomIndex2];\n            let value1 = 0;\n            let value2 = 0;\n            if (Math.random() <= 0.5) value1 = 4;\n            else value1 = 2;\n            if (Math.random() <= 0.5) value2 = 4;\n            else value2 = 2;\n            linearState[randomIOfNull1] = value1;\n            linearState[randomIOfNull2] = value2;\n            this.state = $a5fd07fa01589658$var$Game.convertTo2DArray(linearState);\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports([\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\nconst $09e991522ca7e64e$var$gameBody = document.querySelector(\".game-field tbody\");\nconst $09e991522ca7e64e$var$gameHeader = document.querySelector(\".game-header\");\nconst $09e991522ca7e64e$var$button = $09e991522ca7e64e$var$gameHeader.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nfunction $09e991522ca7e64e$var$updateBoard() {\n    $09e991522ca7e64e$var$gameBody.innerHTML = \"\";\n    $09e991522ca7e64e$var$game.getState().forEach((row)=>{\n        const rowElement = document.createElement(\"tr\");\n        rowElement.classList.add(\"field-row\");\n        row.forEach((cell)=>{\n            const cellElement = document.createElement(\"td\");\n            cellElement.classList.add(\"field-cell\");\n            if (cell > 0) cellElement.classList.add(`field-cell--${cell}`);\n            cellElement.textContent = cell === 0 ? \"\" : cell;\n            rowElement.appendChild(cellElement);\n        });\n        $09e991522ca7e64e$var$gameBody.appendChild(rowElement);\n    });\n    $09e991522ca7e64e$var$gameScore.textContent = `${$09e991522ca7e64e$var$game.getScore()}`;\n}\nfunction $09e991522ca7e64e$var$ifMaxScore() {\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        $09e991522ca7e64e$var$removeEventListeners();\n        document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    }\n}\nfunction $09e991522ca7e64e$var$ifStateBlocked() {\n    document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$are2DArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    return arr1.every((subArr1, index)=>{\n        const subArr2 = arr2[index];\n        if (subArr1.length !== subArr2.length) return false;\n        return subArr1.every((value, subIndex)=>value === subArr2[subIndex]);\n    });\n}\nfunction $09e991522ca7e64e$var$clickOnButton() {\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        const messageStart = document.querySelector(\".message-start\");\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"restart\";\n        messageStart.classList.add(\"hidden\");\n        const gameField = document.querySelector(\".game-field\");\n        const cells = gameField.querySelectorAll(\".field-cell\");\n        const regularArray = $09e991522ca7e64e$var$game.initialState.flat();\n        document.querySelector(\".game-score\").textContent = 0;\n        cells.forEach((cell, index)=>{\n            if (regularArray[index] > 0) {\n                cell.textContent = regularArray[index];\n                cell.classList.add(`field-cell--${regularArray[index]}`);\n            }\n        });\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$addEventListeners();\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        document.querySelector(\".message-lose\").classList.add(\"hidden\");\n        document.querySelector(\".message-win\").classList.add(\"hidden\");\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"start\";\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$addEventListeners();\n    }\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$clickOnButton);\nfunction $09e991522ca7e64e$var$moveLeft() {\n    if (event.key === \"ArrowLeft\") {\n        $09e991522ca7e64e$var$game.moveLeft();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$ifMaxScore();\n        if ($09e991522ca7e64e$var$game.getStatus === \"lose\") $09e991522ca7e64e$var$ifStateBlocked();\n        $09e991522ca7e64e$var$updateBoard();\n    }\n}\nfunction $09e991522ca7e64e$var$moveRight() {\n    if (event.key === \"ArrowRight\") {\n        const firstState = $09e991522ca7e64e$var$game.getState();\n        $09e991522ca7e64e$var$game.moveRight();\n        const secondState = $09e991522ca7e64e$var$game.getState();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$ifMaxScore();\n        if (!$09e991522ca7e64e$var$game.canCellsMove($09e991522ca7e64e$var$game.getState())) $09e991522ca7e64e$var$ifStateBlocked();\n        if (!$09e991522ca7e64e$var$are2DArraysEqual(firstState, secondState)) {\n            $09e991522ca7e64e$var$game.addRandomCell();\n            $09e991522ca7e64e$var$updateBoard();\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$moveUp() {\n    if (event.key === \"ArrowUp\") {\n        const firstState = $09e991522ca7e64e$var$game.getState();\n        $09e991522ca7e64e$var$game.moveUp();\n        const secondState = $09e991522ca7e64e$var$game.getState();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$ifMaxScore();\n        if (!$09e991522ca7e64e$var$game.canCellsMove($09e991522ca7e64e$var$game.getState())) $09e991522ca7e64e$var$ifStateBlocked();\n        if (!$09e991522ca7e64e$var$are2DArraysEqual(firstState, secondState)) {\n            $09e991522ca7e64e$var$game.addRandomCell();\n            $09e991522ca7e64e$var$updateBoard();\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$moveDown() {\n    if (event.key === \"ArrowDown\") {\n        const firstState = $09e991522ca7e64e$var$game.getState();\n        $09e991522ca7e64e$var$game.moveDown();\n        const secondState = $09e991522ca7e64e$var$game.getState();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$ifMaxScore();\n        if (!$09e991522ca7e64e$var$game.canCellsMove($09e991522ca7e64e$var$game.getState())) $09e991522ca7e64e$var$ifStateBlocked();\n        if (!$09e991522ca7e64e$var$are2DArraysEqual(firstState, secondState)) {\n            $09e991522ca7e64e$var$game.addRandomCell();\n            $09e991522ca7e64e$var$updateBoard();\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$removeEventListeners() {\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$moveLeft);\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$moveRight);\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$moveUp);\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$moveDown);\n}\nfunction $09e991522ca7e64e$var$addEventListeners() {\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$moveLeft);\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$moveRight);\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$moveUp);\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$moveDown);\n}\n\n\n//# sourceMappingURL=index.151e0f85.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game([\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n]);\n\nconst gameBody = document.querySelector('.game-field tbody');\nconst gameHeader = document.querySelector('.game-header');\nconst button = gameHeader.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\n\nfunction updateBoard() {\n  gameBody.innerHTML = '';\n\n  game.getState().forEach((row) => {\n    const rowElement = document.createElement('tr');\n\n    rowElement.classList.add('field-row');\n\n    row.forEach((cell) => {\n      const cellElement = document.createElement('td');\n\n      cellElement.classList.add('field-cell');\n\n      if (cell > 0) {\n        cellElement.classList.add(`field-cell--${cell}`);\n      }\n\n      cellElement.textContent = cell === 0 ? '' : cell;\n      rowElement.appendChild(cellElement);\n    });\n    gameBody.appendChild(rowElement);\n  });\n  gameScore.textContent = `${game.getScore()}`;\n}\n\nfunction ifMaxScore() {\n  if (game.getStatus() === 'win') {\n    removeEventListeners();\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n}\n\nfunction ifStateBlocked() {\n  document.querySelector('.message-lose').classList.remove('hidden');\n}\n\nfunction are2DArraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  return arr1.every((subArr1, index) => {\n    const subArr2 = arr2[index];\n\n    if (subArr1.length !== subArr2.length) {\n      return false;\n    }\n\n    return subArr1.every((value, subIndex) => value === subArr2[subIndex]);\n  });\n}\n\nfunction clickOnButton() {\n  if (button.classList.contains('start')) {\n    const messageStart = document.querySelector('.message-start');\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'restart';\n    messageStart.classList.add('hidden');\n\n    const gameField = document.querySelector('.game-field');\n    const cells = gameField.querySelectorAll('.field-cell');\n    const regularArray = game.initialState.flat();\n\n    document.querySelector('.game-score').textContent = 0;\n\n    cells.forEach((cell, index) => {\n      if (regularArray[index] > 0) {\n        cell.textContent = regularArray[index];\n\n        cell.classList.add(`field-cell--${regularArray[index]}`);\n      }\n    });\n\n    game.start();\n    updateBoard();\n    addEventListeners();\n  } else {\n    game.restart();\n\n    document.querySelector('.message-lose').classList.add('hidden');\n    document.querySelector('.message-win').classList.add('hidden');\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'start';\n\n    updateBoard();\n\n    addEventListeners();\n  }\n}\n\nbutton.addEventListener('click', clickOnButton);\n\nfunction moveLeft() {\n  if (event.key === 'ArrowLeft') {\n    game.moveLeft();\n\n    updateBoard();\n\n    ifMaxScore();\n\n    if (game.getStatus === 'lose') {\n      ifStateBlocked();\n    }\n\n    updateBoard();\n  }\n}\n\nfunction moveRight() {\n  if (event.key === 'ArrowRight') {\n    const firstState = game.getState();\n\n    game.moveRight();\n\n    const secondState = game.getState();\n\n    updateBoard();\n\n    ifMaxScore();\n\n    if (!game.canCellsMove(game.getState())) {\n      ifStateBlocked();\n    }\n\n    if (!are2DArraysEqual(firstState, secondState)) {\n      game.addRandomCell();\n      updateBoard();\n    }\n  }\n}\n\nfunction moveUp() {\n  if (event.key === 'ArrowUp') {\n    const firstState = game.getState();\n\n    game.moveUp();\n\n    const secondState = game.getState();\n\n    updateBoard();\n\n    ifMaxScore();\n\n    if (!game.canCellsMove(game.getState())) {\n      ifStateBlocked();\n    }\n\n    if (!are2DArraysEqual(firstState, secondState)) {\n      game.addRandomCell();\n      updateBoard();\n    }\n  }\n}\n\nfunction moveDown() {\n  if (event.key === 'ArrowDown') {\n    const firstState = game.getState();\n\n    game.moveDown();\n\n    const secondState = game.getState();\n\n    updateBoard();\n\n    ifMaxScore();\n\n    if (!game.canCellsMove(game.getState())) {\n      ifStateBlocked();\n    }\n\n    if (!are2DArraysEqual(firstState, secondState)) {\n      game.addRandomCell();\n      updateBoard();\n    }\n  }\n}\n\nfunction removeEventListeners() {\n  document.removeEventListener('keydown', moveLeft);\n  document.removeEventListener('keydown', moveRight);\n  document.removeEventListener('keydown', moveUp);\n  document.removeEventListener('keydown', moveDown);\n}\n\nfunction addEventListeners() {\n  document.addEventListener('keydown', moveLeft);\n  document.addEventListener('keydown', moveRight);\n  document.addEventListener('keydown', moveUp);\n  document.addEventListener('keydown', moveDown);\n}\n","'use strict';\n\nclass Game {\n  /**\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   */\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = initialState;\n    this.initialState = initialState;\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  static transposeMatrix(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n\n  static ifEqualSeeEach(elements) {\n    let ifEqual = false;\n    const indexesOfRight = [];\n    const allEqual = elements.every((item) => {\n      return item === elements[0] && elements[0] !== 0;\n    });\n\n    for (let i = 0; i < elements.length - 1; i += 1) {\n      let j = i + 1;\n\n      if (elements[j] === 0) {\n        j++;\n\n        if (elements[j] === 0) {\n          j++;\n        }\n      }\n\n      if (elements[i] === elements[j] && elements[i] !== 0) {\n        ifEqual = true;\n\n        indexesOfRight.push(i);\n        indexesOfRight.push(j);\n\n        if (\n          !allEqual &&\n          !(elements[0] === elements[1] && elements[2] === elements[3])\n        ) {\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    return [ifEqual, indexesOfRight];\n  }\n\n  static convertTo2DArray(arr) {\n    const result = [];\n\n    for (let i = 0; i < 4; i++) {\n      result.push(arr.slice(i * 4, i * 4 + 4));\n    }\n\n    return result;\n  }\n\n  static cellsMoveValues(rowOrColValues) {\n    let insertPosition = 0;\n    const valuesCopy = [...rowOrColValues];\n\n    valuesCopy.forEach((cell, index, row) => {\n      if (cell !== 0) {\n        if (insertPosition !== index) {\n          valuesCopy[insertPosition] = cell;\n          row[index] = 0;\n        }\n        insertPosition++;\n      }\n    });\n\n    return valuesCopy;\n  }\n\n  static are2DArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    return arr1.every((subArr1, index) => {\n      const subArr2 = arr2[index];\n\n      if (subArr1.length !== subArr2.length) {\n        return false;\n      }\n\n      return subArr1.every((value, subIndex) => value === subArr2[subIndex]);\n    });\n  }\n\n  canCellsMove(grid) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (grid[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = grid[row][col];\n\n        if (\n          (col < 3 && current === grid[row][col + 1]) ||\n          (row < 3 && current === grid[row + 1][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  cellsMergeValues(target, second) {\n    const newTarget = target + second;\n    const newSecond = 0;\n\n    this.score += newTarget;\n\n    return [newTarget, newSecond];\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const firstState = this.getState();\n\n      this.state = this.state.map((row) => {\n        const rowCopy = [...row];\n        const ifEquals = Game.ifEqualSeeEach(rowCopy)[0];\n        const indexesOfRights = Game.ifEqualSeeEach(rowCopy)[1];\n\n        if (ifEquals) {\n          const newCells = this.cellsMergeValues(\n            rowCopy[indexesOfRights[0]],\n            rowCopy[indexesOfRights[1]],\n          );\n\n          rowCopy[indexesOfRights[0]] = newCells[0];\n          rowCopy[indexesOfRights[1]] = newCells[1];\n\n          if (indexesOfRights.length === 4) {\n            const newCells2 = this.cellsMergeValues(\n              rowCopy[indexesOfRights[2]],\n              rowCopy[indexesOfRights[3]],\n            );\n\n            rowCopy[indexesOfRights[2]] = newCells2[0];\n            rowCopy[indexesOfRights[3]] = newCells2[1];\n          }\n        }\n\n        const rowAfterMove = Game.cellsMoveValues(rowCopy);\n\n        return rowAfterMove;\n      });\n\n      const secondState = this.getState();\n\n      if (!Game.are2DArraysEqual(firstState, secondState)) {\n        this.addRandomCell();\n      }\n    }\n\n    const gameField = this.getState();\n    const flatField = gameField.flat();\n\n    if (flatField.includes(2048)) {\n      this.status = 'win';\n    }\n\n    if (!this.canCellsMove(this.getState())) {\n      this.status = 'lose';\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const firstState = this.getState();\n\n      this.state = this.state.map((row) => {\n        const reverseRow = [...row].reverse();\n        const ifEquals = Game.ifEqualSeeEach(reverseRow)[0];\n        const indexesOfRights = Game.ifEqualSeeEach(reverseRow)[1];\n\n        if (ifEquals) {\n          const newCells = this.cellsMergeValues(\n            reverseRow[indexesOfRights[0]],\n            reverseRow[indexesOfRights[1]],\n          );\n\n          reverseRow[indexesOfRights[0]] = newCells[0];\n          reverseRow[indexesOfRights[1]] = newCells[1];\n\n          if (indexesOfRights.length === 4) {\n            const newCells2 = this.cellsMergeValues(\n              reverseRow[indexesOfRights[2]],\n              reverseRow[indexesOfRights[3]],\n            );\n\n            reverseRow[indexesOfRights[2]] = newCells2[0];\n            reverseRow[indexesOfRights[3]] = newCells2[1];\n          }\n        }\n\n        const rowAfterMove = Game.cellsMoveValues(reverseRow);\n\n        return rowAfterMove.reverse();\n      });\n\n      const secondState = this.getState();\n\n      if (!Game.are2DArraysEqual(firstState, secondState)) {\n        this.addRandomCell();\n      }\n    }\n\n    const gameField = this.getState();\n    const flatField = gameField.flat();\n\n    if (flatField.includes(2048)) {\n      this.status = 'win';\n    }\n\n    if (!this.canCellsMove(this.getState())) {\n      this.status = 'lose';\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const firstState = this.getState();\n\n      const currentState = this.state;\n      const transState = Game.transposeMatrix(currentState);\n\n      const transMovedState = transState.map((row) => {\n        const ifEquals = Game.ifEqualSeeEach(row)[0];\n        const indexesOfRights = Game.ifEqualSeeEach(row)[1];\n\n        if (ifEquals) {\n          const newCells = this.cellsMergeValues(\n            row[indexesOfRights[0]],\n            row[indexesOfRights[1]],\n          );\n\n          row[indexesOfRights[0]] = newCells[0];\n          row[indexesOfRights[1]] = newCells[1];\n\n          if (indexesOfRights.length === 4) {\n            const newCells2 = this.cellsMergeValues(\n              row[indexesOfRights[2]],\n              row[indexesOfRights[3]],\n            );\n\n            row[indexesOfRights[2]] = newCells2[0];\n            row[indexesOfRights[3]] = newCells2[1];\n          }\n        }\n\n        const rowAfterMove = Game.cellsMoveValues(row);\n\n        return rowAfterMove;\n      });\n\n      this.state = Game.transposeMatrix(transMovedState);\n\n      const secondState = this.getState();\n\n      if (!Game.are2DArraysEqual(firstState, secondState)) {\n        this.addRandomCell();\n      }\n    }\n\n    const gameField = this.getState();\n    const flatField = gameField.flat();\n\n    if (flatField.includes(2048)) {\n      this.status = 'win';\n    }\n\n    if (!this.canCellsMove(this.getState())) {\n      this.status = 'lose';\n    }\n  }\n\n  moveDown() {\n    const firstState = this.getState();\n\n    if (this.status === 'playing') {\n      const currentState = this.state;\n      const transState = Game.transposeMatrix(currentState);\n\n      const transMovedState = transState.map((row) => {\n        const reverseRow = [...row].reverse();\n        const ifEquals = Game.ifEqualSeeEach(reverseRow)[0];\n        const indexesOfRights = Game.ifEqualSeeEach(reverseRow)[1];\n\n        if (ifEquals) {\n          const newCells = this.cellsMergeValues(\n            reverseRow[indexesOfRights[0]],\n            reverseRow[indexesOfRights[1]],\n          );\n\n          reverseRow[indexesOfRights[0]] = newCells[0];\n          reverseRow[indexesOfRights[1]] = newCells[1];\n\n          if (indexesOfRights.length === 4) {\n            const newCells2 = this.cellsMergeValues(\n              reverseRow[indexesOfRights[2]],\n              reverseRow[indexesOfRights[3]],\n            );\n\n            reverseRow[indexesOfRights[2]] = newCells2[0];\n            reverseRow[indexesOfRights[3]] = newCells2[1];\n          }\n        }\n\n        const rowAfterMove = Game.cellsMoveValues(reverseRow);\n\n        return rowAfterMove.reverse();\n      });\n\n      this.state = Game.transposeMatrix(transMovedState);\n\n      const secondState = this.getState();\n\n      if (!Game.are2DArraysEqual(firstState, secondState)) {\n        this.addRandomCell();\n      }\n    }\n\n    const gameField = this.getState();\n    const flatField = gameField.flat();\n\n    if (flatField.includes(2048)) {\n      this.status = 'win';\n    }\n\n    if (!this.canCellsMove(this.getState())) {\n      this.status = 'lose';\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomStartCells();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.state = this.initialState;\n    this.score = 0;\n  }\n\n  addRandomCell() {\n    const currentState = this.getState();\n    const linearState = currentState.flat();\n\n    const iOfNulls = [];\n\n    linearState.forEach((cell, index) => {\n      if (cell === 0) {\n        iOfNulls.push(index);\n      }\n    });\n\n    if (iOfNulls.length > 0) {\n      const randomIndex = Math.floor(Math.random() * iOfNulls.length);\n      const randomIOfNull = iOfNulls[randomIndex];\n\n      let value = 0;\n\n      if (Math.random() <= 0.1) {\n        value = 4;\n      } else {\n        value = 2;\n      }\n\n      linearState[randomIOfNull] = value;\n\n      this.state = Game.convertTo2DArray(linearState);\n    }\n  }\n\n  addRandomStartCells() {\n    const currentState = this.getState();\n    const linearState = currentState.flat();\n\n    const iOfNulls = [];\n\n    linearState.forEach((cell, index) => {\n      if (cell === 0) {\n        iOfNulls.push(index);\n      }\n    });\n\n    if (iOfNulls.length > 0) {\n      const randomIndex1 = Math.floor(Math.random() * iOfNulls.length);\n      const randomIOfNull1 = iOfNulls[randomIndex1];\n\n      iOfNulls.splice(randomIndex1, 1);\n\n      const randomIndex2 = Math.floor(Math.random() * iOfNulls.length);\n      const randomIOfNull2 = iOfNulls[randomIndex2];\n\n      let value1 = 0;\n      let value2 = 0;\n\n      if (Math.random() <= 0.5) {\n        value1 = 4;\n      } else {\n        value1 = 2;\n      }\n\n      if (Math.random() <= 0.5) {\n        value2 = 4;\n      } else {\n        value2 = 2;\n      }\n\n      linearState[randomIOfNull1] = value1;\n      linearState[randomIOfNull2] = value2;\n\n      this.state = Game.convertTo2DArray(linearState);\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","constructor","initialState","state","status","score","transposeMatrix","matrix","map","_","colIndex","row","ifEqualSeeEach","elements","ifEqual","indexesOfRight","allEqual","every","item","i","length","j","push","convertTo2DArray","arr","result","slice","cellsMoveValues","rowOrColValues","insertPosition","valuesCopy","forEach","cell","index","are2DArraysEqual","arr1","arr2","subArr1","subArr2","value","subIndex","canCellsMove","grid","col","current","cellsMergeValues","target","second","newTarget","moveLeft","firstState","getState","rowCopy","ifEquals","indexesOfRights","newCells","newCells2","secondState","addRandomCell","flatField","gameField","flat","includes","moveRight","reverseRow","reverse","rowAfterMove","moveUp","currentState","transMovedState","transState","moveDown","getScore","getStatus","start","addRandomStartCells","restart","linearState","iOfNulls","randomIndex","Math","floor","random","randomIOfNull","randomIndex1","randomIOfNull1","splice","randomIndex2","randomIOfNull2","value1","value2","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$gameBody","document","querySelector","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$gameHeader","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$updateBoard","innerHTML","rowElement","createElement","classList","add","cellElement","textContent","appendChild","$09e991522ca7e64e$var$ifMaxScore","removeEventListener","$09e991522ca7e64e$var$moveLeft","$09e991522ca7e64e$var$moveRight","$09e991522ca7e64e$var$moveUp","$09e991522ca7e64e$var$moveDown","remove","$09e991522ca7e64e$var$ifStateBlocked","$09e991522ca7e64e$var$are2DArraysEqual","event","key","$09e991522ca7e64e$var$addEventListeners","addEventListener","contains","messageStart","cells","querySelectorAll","regularArray"],"version":3,"file":"index.151e0f85.js.map"}